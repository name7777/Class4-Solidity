/* 매핑과 주소
 * 1) 주소
 * 이더리움 블록체인은 은행 계좌와 같은 계정들로 이루어져 있다
 * 계정은 이더리움 블록체인상의 통화인 "이더"의 잔액을 가진다
 * 자신의 은행 계좌에서 다른 계좌로 돈을 송금할 수 있듯이, 계정을 통해 다른 계정과 이더를 주고 받을 수 있다
 * 각 계정은 은행 계좌 번호와 같은 주소를 가지고 있다. 주소는 특정 계정을 가리키는 고유 식별자로, 다음과 같이 표현된다
    0x0cE446255506E92DF41614C46F1d6df9Cc969183
 * 여기서 "주소는 특정 유저(혹은 스마트 컨트랙트)가 소유한다"라는 점만 이해하면 된다
 * 그러니까 주소를 우리 좀비들에 대한 소유권을 나타내는 고유 ID로 활용할 수 있다
 * 유저가 우리 앱을 통해 새로운 좀비를 생성하면 좀비를 생성하는 함수를 호출한 이더리움 주소에 그 좀비에 대한 소유권을 부여한다

 * 2) 매핑
 * lesson1에서 구조체와 배열을 살펴 봤다
 * "매핑"은 솔리디티에서 구조화된 데이터를 저장하는 또다른 방법
 * 다음과 같이 매핑을 정의한다
  - 금융 앱용으로, 유저의 계좌 잔액을 보유하는 uint를 저장한다: 
    mapping (address => uint) public accountBalance;
  - 혹은 userID로 유저 이름을 저장/검색하는 데 매핑을 쓸 수도 있다 
    mapping (uint => string) userIdToName;
 */